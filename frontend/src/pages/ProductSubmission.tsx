import { useState, useEffect } from "react";
import {
  ArrowLeft,
  ArrowRight,
  CheckCircle2,
  Loader2,
  Download,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Link } from "react-router-dom";
import { jsPDF } from "jspdf";
import { BasicInfoStep } from "@/components/submission/BasicInfoStep";
import { CategoryStep } from "@/components/submission/CategoryStep";
import { useProductSubmission } from "@/hooks/useProductSubmission";

const TOTAL_STEPS = 5;

const ProductSubmission = () => {
  const [formData, setFormData] = useState({
    productName: "",
    brandName: "",
    category: "",
    description: "",
  });

  const {
    productId,
    currentStep,
    questions,
    responses,
    summaryText,
    isLoading,
    isSubmitting,
    createProduct,
    generateQuestions,
    generateSummary,
    setCurrentStep,
    setResponses,
  } = useProductSubmission();

  const progress = (currentStep / TOTAL_STEPS) * 100;

  /** STEP 3 Auto-fetch questions when productId becomes available */
  useEffect(() => {
    if (currentStep === 3 && productId) {
      console.log("üéØ Triggering question generation for:", productId);
      generateQuestions(formData);
    }
  }, [currentStep, productId, generateQuestions, formData]);

  /** Auto move if ID detected late */
  useEffect(() => {
    if (productId && currentStep === 2) setCurrentStep(3);
  }, [productId]);

  /** NEXT Button flow */
  const handleNext = async () => {
    if (currentStep === 2) {
      const created = await createProduct(formData);
      if (created?.id) setCurrentStep(3);
    } else if (currentStep === 4) {
      await generateSummary(formData, responses);
      setCurrentStep(5);
    } else if (currentStep < TOTAL_STEPS) {
      setCurrentStep(currentStep + 1);
    }
  };

  /** BACK Button */
  const handleBack = () => {
    if (currentStep > 1) setCurrentStep(currentStep - 1);
  };

  /** Generate PDF Download */
  const handleGenerateReport = async () => {
    try {
      const doc = new jsPDF();
      let y = 20;

      doc.setFont("helvetica", "bold");
      doc.setFontSize(20);
      doc.text("Product Transparency Report", 105, y, { align: "center" });
      y += 10;

      doc.setFontSize(10);
      doc.setTextColor(100);
      doc.text(`Report ID: ${productId || "N/A"}`, 105, y, { align: "center" });
      doc.text(`Generated on: ${new Date().toLocaleString()}`, 105, (y += 5), { align: "center" });

      y += 10;
      doc.setDrawColor(180);
      doc.line(20, y, 190, y);
      y += 10;

      // ‚îÄ‚îÄ‚îÄ Basic Info ‚îÄ‚îÄ‚îÄ
      doc.setTextColor(0);
      doc.setFont("helvetica", "bold");
      doc.text("1. Basic Product Information", 20, y);
      y += 8;
      doc.setFont("helvetica", "normal");
      doc.text(`Product Name: ${formData.productName}`, 25, y);
      y += 6;
      doc.text(`Brand Name: ${formData.brandName}`, 25, y);
      y += 6;
      doc.text(`Category: ${formData.category}`, 25, y);
      y += 6;
      doc.text(`Description: ${formData.description || "N/A"}`, 25, y);
      y += 12;

      // ‚îÄ‚îÄ‚îÄ Insights ‚îÄ‚îÄ‚îÄ
      doc.setFont("helvetica", "bold");
      doc.text("2. Product Insights & Key Information", 20, y);
      y += 8;
      doc.setFont("helvetica", "normal");
      questions.forEach((q, index) => {
        const ans = responses[q.id] || "No response provided.";
        doc.text(`${index + 1}. ${q.text}`, 25, y);
        y += 6;
        doc.setTextColor(80);
        doc.text(`‚Üí ${ans}`, 30, y);
        doc.setTextColor(0);
        y += 8;
        if (y > 270) {
          doc.addPage();
          y = 20;
        }
      });

      // ‚îÄ‚îÄ‚îÄ Additional ‚îÄ‚îÄ‚îÄ
      doc.setFont("helvetica", "bold");
      doc.text("3. Additional Details", 20, y);
      y += 8;
      doc.setFont("helvetica", "normal");
      doc.text(responses["additionalInfo"] || "No extra details provided.", 25, y);
      y += 12;

      // ‚îÄ‚îÄ‚îÄ Summary ‚îÄ‚îÄ‚îÄ
      doc.setFont("helvetica", "bold");
      doc.text("4. Executive Summary", 20, y);
      y += 8;
      doc.setFont("helvetica", "normal");
      const summary =
        summaryText ||
        "This product demonstrates transparency, sustainability, and a strong ethical commitment.";
      doc.text(summary, 25, y, { maxWidth: 160, align: "justify" });

      // ‚îÄ‚îÄ‚îÄ Footer ‚îÄ‚îÄ‚îÄ
      doc.setFontSize(10);
      doc.setTextColor(100);
      doc.text(
        "This report was automatically generated by ClearChoice Insight.",
        105,
        285,
        { align: "center" }
      );

      doc.save("transparency-report.pdf");
    } catch (err) {
      console.error("‚ùå Error generating report:", err);
    }
  };

  const updateFormData = (data: Partial<typeof formData>) =>
    setFormData((prev) => ({ ...prev, ...data }));

  /** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
  return (
    <div className="min-h-screen bg-gradient-to-br from-muted/30 via-background to-muted/30">
      {/* HEADER */}
      <div className="border-b bg-background/80 backdrop-blur-sm sticky top-0 z-10">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <Link to="/" className="flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground transition-colors">
            <ArrowLeft className="h-4 w-4" /> Back to Home
          </Link>
          <span className="text-sm font-medium">
            Step {currentStep} of {TOTAL_STEPS}
          </span>
        </div>
      </div>

      {/* PROGRESS BAR */}
      <div className="border-b bg-background/50 backdrop-blur-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="space-y-2">
            <div className="flex justify-between text-xs text-muted-foreground">
              <span>Progress</span>
              <span>{Math.round(progress)}%</span>
            </div>
            <Progress value={progress} className="h-2" />
          </div>
        </div>
      </div>

      {/* MAIN CONTENT */}
      <div className="container mx-auto px-4 py-8 md:py-12">
        <div className="mx-auto max-w-3xl">
          <Card className="glass p-6 md:p-8 shadow-xl">
            {/* Steps 1‚Äì5 Logic */}
            {currentStep < 5 ? (
              <>
                {/* Step 1 */}
                {currentStep === 1 && (
                  <BasicInfoStep formData={formData} updateFormData={updateFormData} />
                )}

                {/* Step 2 */}
                {currentStep === 2 && (
                  <CategoryStep formData={formData} updateFormData={updateFormData} />
                )}

                {/* Step 3 */}
                {currentStep === 3 && (
                  <div className="space-y-4">
                    <h2 className="text-2xl font-bold mb-2">
                      Product Insights & Key Information
                    </h2>
                    {isLoading ? (
                      <div className="flex items-center justify-center py-8">
                        <Loader2 className="h-8 w-8 animate-spin text-primary" />
                        <span className="ml-2">Generating questions...</span>
                      </div>
                    ) : (
                      <div className="space-y-6">
                        {questions.map((q) => (
                          <div key={q.id} className="space-y-3">
                            <Label className="text-base font-medium">{q.text}</Label>
                            <Textarea
                              placeholder="Enter your detailed response..."
                              value={responses[q.id] || ""}
                              onChange={(e) =>
                                setResponses({ ...responses, [q.id]: e.target.value })
                              }
                              className="min-h-24 text-base resize-none"
                            />
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                )}

                {/* Step 4 */}
                {currentStep === 4 && (
                  <div className="space-y-4">
                    <h2 className="text-2xl font-bold mb-2">Additional Details</h2>
                    <Textarea
                      placeholder="e.g., Certifications, sustainability info, or safety standards..."
                      value={responses["additionalInfo"] || ""}
                      onChange={(e) =>
                        setResponses({ ...responses, additionalInfo: e.target.value })
                      }
                      className="min-h-32 text-base resize-none"
                    />
                  </div>
                )}
              </>
            ) : (
              // STEP 5 SUMMARY
              <div className="space-y-4">
                <h2 className="text-2xl font-bold mb-2">Executive Summary</h2>
                <p className="text-muted-foreground">{summaryText}</p>
                <div className="p-4 bg-primary/10 rounded-md border-l-4 border-primary">
                  <p className="text-sm text-primary font-medium">
                    üí° For full transparency details, click "Generate & Download Report" below.
                  </p>
                </div>
              </div>
            )}

            {/* NAVIGATION */}
            <div className="flex items-center justify-between gap-4 mt-8">
              <Button variant="outline" onClick={handleBack} disabled={currentStep === 1}>
                <ArrowLeft className="h-4 w-4" /> Back
              </Button>

              {currentStep === TOTAL_STEPS ? (
                <Button onClick={handleGenerateReport} disabled={isSubmitting} className="gap-2">
                  <Download className="h-4 w-4" /> Generate & Download Report
                </Button>
              ) : (
                <Button onClick={handleNext} disabled={isLoading} className="gap-2">
                  Continue <ArrowRight className="h-4 w-4" />
                </Button>
              )}
            </div>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default ProductSubmission;
